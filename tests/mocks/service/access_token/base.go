// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/access_token/base.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/access_token/base.go -destination=tests/mocks/./service/access_token/base.go
//

// Package mock_accesstoken is a generated GoMock package.
package mock_accesstoken

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	postgresql "github.com/agungcandra/snap/internal/repository/postgresql"
)

// MockaccessTokenRepository is a mock of accessTokenRepository interface.
type MockaccessTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockaccessTokenRepositoryMockRecorder
}

// MockaccessTokenRepositoryMockRecorder is the mock recorder for MockaccessTokenRepository.
type MockaccessTokenRepositoryMockRecorder struct {
	mock *MockaccessTokenRepository
}

// NewMockaccessTokenRepository creates a new mock instance.
func NewMockaccessTokenRepository(ctrl *gomock.Controller) *MockaccessTokenRepository {
	mock := &MockaccessTokenRepository{ctrl: ctrl}
	mock.recorder = &MockaccessTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccessTokenRepository) EXPECT() *MockaccessTokenRepositoryMockRecorder {
	return m.recorder
}

// FindClientByID mocks base method.
func (m *MockaccessTokenRepository) FindClientByID(ctx context.Context, id string) (postgresql.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClientByID", ctx, id)
	ret0, _ := ret[0].(postgresql.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClientByID indicates an expected call of FindClientByID.
func (mr *MockaccessTokenRepositoryMockRecorder) FindClientByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClientByID", reflect.TypeOf((*MockaccessTokenRepository)(nil).FindClientByID), ctx, id)
}

// InsertClient mocks base method.
func (m *MockaccessTokenRepository) InsertClient(ctx context.Context, arg postgresql.InsertClientParams) (postgresql.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertClient", ctx, arg)
	ret0, _ := ret[0].(postgresql.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertClient indicates an expected call of InsertClient.
func (mr *MockaccessTokenRepositoryMockRecorder) InsertClient(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertClient", reflect.TypeOf((*MockaccessTokenRepository)(nil).InsertClient), ctx, arg)
}
