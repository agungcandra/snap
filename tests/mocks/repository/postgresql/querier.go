// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/postgresql/querier.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/postgresql/querier.go -destination=tests/mocks/./repository/postgresql/querier.go
//

// Package mock_postgresql is a generated GoMock package.
package mock_postgresql

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	postgresql "github.com/agungcandra/snap/internal/repository/postgresql"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// InsertClient mocks base method.
func (m *MockQuerier) InsertClient(ctx context.Context, arg postgresql.InsertClientParams) (postgresql.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertClient", ctx, arg)
	ret0, _ := ret[0].(postgresql.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertClient indicates an expected call of InsertClient.
func (mr *MockQuerierMockRecorder) InsertClient(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertClient", reflect.TypeOf((*MockQuerier)(nil).InsertClient), ctx, arg)
}

// InsertKey mocks base method.
func (m *MockQuerier) InsertKey(ctx context.Context, arg postgresql.InsertKeyParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKey", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertKey indicates an expected call of InsertKey.
func (mr *MockQuerierMockRecorder) InsertKey(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKey", reflect.TypeOf((*MockQuerier)(nil).InsertKey), ctx, arg)
}

// InsertNonce mocks base method.
func (m *MockQuerier) InsertNonce(ctx context.Context, arg postgresql.InsertNonceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNonce", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNonce indicates an expected call of InsertNonce.
func (mr *MockQuerierMockRecorder) InsertNonce(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNonce", reflect.TypeOf((*MockQuerier)(nil).InsertNonce), ctx, arg)
}

// InsertSalt mocks base method.
func (m *MockQuerier) InsertSalt(ctx context.Context, arg postgresql.InsertSaltParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSalt", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSalt indicates an expected call of InsertSalt.
func (mr *MockQuerierMockRecorder) InsertSalt(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSalt", reflect.TypeOf((*MockQuerier)(nil).InsertSalt), ctx, arg)
}
