// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/postgresql/transaction.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/postgresql/transaction.go -destination=tests/mocks/./repository/postgresql/transaction.go
//

// Package mock_postgresql is a generated GoMock package.
package mock_postgresql

import (
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"

	postgresql "github.com/agungcandra/snap/internal/repository/postgresql"
)

// MockWithTx is a mock of WithTx interface.
type MockWithTx struct {
	ctrl     *gomock.Controller
	recorder *MockWithTxMockRecorder
}

// MockWithTxMockRecorder is the mock recorder for MockWithTx.
type MockWithTxMockRecorder struct {
	mock *MockWithTx
}

// NewMockWithTx creates a new mock instance.
func NewMockWithTx(ctrl *gomock.Controller) *MockWithTx {
	mock := &MockWithTx{ctrl: ctrl}
	mock.recorder = &MockWithTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithTx) EXPECT() *MockWithTxMockRecorder {
	return m.recorder
}

// WithTx mocks base method.
func (m *MockWithTx) WithTx(tx pgx.Tx) *postgresql.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(*postgresql.Queries)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockWithTxMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockWithTx)(nil).WithTx), tx)
}
