// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/crypto/database/base.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/crypto/database/base.go -destination=tests/mocks/./repository/crypto/database/base.go
//

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"

	postgresql "github.com/agungcandra/snap/internal/repository/postgresql"
	gomock "go.uber.org/mock/gomock"
)

// MockEncryptionKeyRepository is a mock of EncryptionKeyRepository interface.
type MockEncryptionKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionKeyRepositoryMockRecorder
}

// MockEncryptionKeyRepositoryMockRecorder is the mock recorder for MockEncryptionKeyRepository.
type MockEncryptionKeyRepositoryMockRecorder struct {
	mock *MockEncryptionKeyRepository
}

// NewMockEncryptionKeyRepository creates a new mock instance.
func NewMockEncryptionKeyRepository(ctrl *gomock.Controller) *MockEncryptionKeyRepository {
	mock := &MockEncryptionKeyRepository{ctrl: ctrl}
	mock.recorder = &MockEncryptionKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptionKeyRepository) EXPECT() *MockEncryptionKeyRepositoryMockRecorder {
	return m.recorder
}

// FindLatestKeyStorageByName mocks base method.
func (m *MockEncryptionKeyRepository) FindLatestKeyStorageByName(ctx context.Context, name string) (postgresql.KeyStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestKeyStorageByName", ctx, name)
	ret0, _ := ret[0].(postgresql.KeyStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestKeyStorageByName indicates an expected call of FindLatestKeyStorageByName.
func (mr *MockEncryptionKeyRepositoryMockRecorder) FindLatestKeyStorageByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestKeyStorageByName", reflect.TypeOf((*MockEncryptionKeyRepository)(nil).FindLatestKeyStorageByName), ctx, name)
}

// InsertKeyStorage mocks base method.
func (m *MockEncryptionKeyRepository) InsertKeyStorage(ctx context.Context, arg postgresql.InsertKeyStorageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKeyStorage", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertKeyStorage indicates an expected call of InsertKeyStorage.
func (mr *MockEncryptionKeyRepositoryMockRecorder) InsertKeyStorage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKeyStorage", reflect.TypeOf((*MockEncryptionKeyRepository)(nil).InsertKeyStorage), ctx, arg)
}

// MockEncryptionKeyRetriever is a mock of EncryptionKeyRetriever interface.
type MockEncryptionKeyRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionKeyRetrieverMockRecorder
}

// MockEncryptionKeyRetrieverMockRecorder is the mock recorder for MockEncryptionKeyRetriever.
type MockEncryptionKeyRetrieverMockRecorder struct {
	mock *MockEncryptionKeyRetriever
}

// NewMockEncryptionKeyRetriever creates a new mock instance.
func NewMockEncryptionKeyRetriever(ctrl *gomock.Controller) *MockEncryptionKeyRetriever {
	mock := &MockEncryptionKeyRetriever{ctrl: ctrl}
	mock.recorder = &MockEncryptionKeyRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptionKeyRetriever) EXPECT() *MockEncryptionKeyRetrieverMockRecorder {
	return m.recorder
}

// GenerateKey mocks base method.
func (m *MockEncryptionKeyRetriever) GenerateKey(ctx context.Context, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKey", ctx, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKey indicates an expected call of GenerateKey.
func (mr *MockEncryptionKeyRetrieverMockRecorder) GenerateKey(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockEncryptionKeyRetriever)(nil).GenerateKey), ctx, name)
}

// RetrieveKey mocks base method.
func (m *MockEncryptionKeyRetriever) RetrieveKey(ctx context.Context, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveKey", ctx, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveKey indicates an expected call of RetrieveKey.
func (mr *MockEncryptionKeyRetrieverMockRecorder) RetrieveKey(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveKey", reflect.TypeOf((*MockEncryptionKeyRetriever)(nil).RetrieveKey), ctx, name)
}

// MockKeyStorage is a mock of KeyStorage interface.
type MockKeyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockKeyStorageMockRecorder
}

// MockKeyStorageMockRecorder is the mock recorder for MockKeyStorage.
type MockKeyStorageMockRecorder struct {
	mock *MockKeyStorage
}

// NewMockKeyStorage creates a new mock instance.
func NewMockKeyStorage(ctrl *gomock.Controller) *MockKeyStorage {
	mock := &MockKeyStorage{ctrl: ctrl}
	mock.recorder = &MockKeyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyStorage) EXPECT() *MockKeyStorageMockRecorder {
	return m.recorder
}
