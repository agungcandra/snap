// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/crypto/encrypt.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/crypto/encrypt.go -destination=tests/mocks/./repository/crypto/encrypt.go
//

// Package mock_crypto is a generated GoMock package.
package mock_crypto

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCrypto is a mock of Crypto interface.
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto.
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance.
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCrypto) Decrypt(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Decrypt", ctx)
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCryptoMockRecorder) Decrypt(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCrypto)(nil).Decrypt), ctx)
}

// Encrypt mocks base method.
func (m *MockCrypto) Encrypt(ctx context.Context, payload []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Encrypt", ctx, payload)
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCryptoMockRecorder) Encrypt(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCrypto)(nil).Encrypt), ctx, payload)
}
