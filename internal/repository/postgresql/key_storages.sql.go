// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: key_storages.sql

package postgresql

import (
	"context"
)

const findLatestKeyStorageByName = `-- name: FindLatestKeyStorageByName :one
SELECT id, name, version, data, created_at FROM key_storages
WHERE name = $1
ORDER BY version DESC
LIMIT 1
`

func (q *Queries) FindLatestKeyStorageByName(ctx context.Context, name string) (KeyStorage, error) {
	row := q.db.QueryRow(ctx, findLatestKeyStorageByName, name)
	var i KeyStorage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.Data,
		&i.CreatedAt,
	)
	return i, err
}

const insertKeyStorage = `-- name: InsertKeyStorage :exec
INSERT INTO key_storages (
  name,
  version,
  data
) VALUES (
  $1,
  COALESCE(
    (SELECT MAX(version) + 1 FROM client_keys WHERE name = $1),
    1
  ),
  $2
)
`

type InsertKeyStorageParams struct {
	Name string `db:"name"`
	Data []byte `db:"data"`
}

func (q *Queries) InsertKeyStorage(ctx context.Context, arg InsertKeyStorageParams) error {
	_, err := q.db.Exec(ctx, insertKeyStorage, arg.Name, arg.Data)
	return err
}
