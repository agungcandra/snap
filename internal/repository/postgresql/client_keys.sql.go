// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: client_keys.sql

package postgresql

import (
	"context"
)

const findLatestClientKeyByName = `-- name: FindLatestClientKeyByName :one
SELECT id, name, version, data, nonce, created_at FROM client_keys
WHERE name = $1
ORDER BY version DESC
LIMIT 1
`

func (q *Queries) FindLatestClientKeyByName(ctx context.Context, name string) (ClientKey, error) {
	row := q.db.QueryRow(ctx, findLatestClientKeyByName, name)
	var i ClientKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.Data,
		&i.Nonce,
		&i.CreatedAt,
	)
	return i, err
}

const insertClientKey = `-- name: InsertClientKey :exec
INSERT INTO client_keys (
  name,
  version,
  data,
  nonce
) VALUES (
  $1,
  COALESCE(
    (SELECT MAX(version) + 1 FROM client_keys WHERE name = $1),
    1
  ),
  $2,
  $3
)
`

type InsertClientKeyParams struct {
	Name  string `db:"name"`
	Data  []byte `db:"data"`
	Nonce []byte `db:"nonce"`
}

func (q *Queries) InsertClientKey(ctx context.Context, arg InsertClientKeyParams) error {
	_, err := q.db.Exec(ctx, insertClientKey, arg.Name, arg.Data, arg.Nonce)
	return err
}
